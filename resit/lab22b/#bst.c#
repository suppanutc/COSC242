#include <stdio.h>
#include <stdlib.h>
#include "mylib.h"
#include "bst.h"

typedef struct bst_node *bst;

struct bst_node {
    char *key;
    bst left;
    bst right;
};

bst bst_new() {
    return NULL;
}

void bst_inorder(bst b, void f(char *str)) {
    if (b == NULL) { return; }
    
    bst_inorder(b->left, f);
    f(b->key);
    bst_inorder(b->right, f);
}

void bst_preorder(bst b, void f(char *str)) {
    if (b == NULL) { return; }

    f(b->key);
    bst_preorder(b->left, f);
    bst_preorder(b->right, f);
}

bst bst_insert(bst b, char *str){
    if (b == NULL) {
        b = emalloc(sizeof *b);
        b->key = emalloc(sizeof *str);
        b->key = str;
        return b;
    } else {
        if (b->key == str) {}
        if (b->key > str) {
            b->left = bst_insert(b->left, str);
        } else if (b->key < str){
            b->right = bst_insert(b->right, str);
        }
    }
}

int bst_search(bst b, char *str) {
    if (b == NULL) {return 0;}
    if (str < b->key) {
        bst_search(b->left, str);
    } else if (str > b->key) {
        bst_search(b->right, str);
    } else if (str == b->key) {
        return 1;
    } else {
        return 0;
    }
    
}

bst bst_free(bst b){
    if (b == NULL) {return ;}
    bst_free(b->left);
    bst_free(b->right);
    free(b->key);
    free(b);
    return b;
}
